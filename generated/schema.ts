// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CourtConfig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourtConfig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourtConfig must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CourtConfig", id.toString(), this);
    }
  }

  static load(id: string): CourtConfig | null {
    return changetype<CourtConfig | null>(store.get("CourtConfig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentTerm(): BigInt {
    let value = this.get("currentTerm");
    return value!.toBigInt();
  }

  set currentTerm(value: BigInt) {
    this.set("currentTerm", Value.fromBigInt(value));
  }

  get termDuration(): BigInt {
    let value = this.get("termDuration");
    return value!.toBigInt();
  }

  set termDuration(value: BigInt) {
    this.set("termDuration", Value.fromBigInt(value));
  }

  get feeToken(): string {
    let value = this.get("feeToken");
    return value!.toString();
  }

  set feeToken(value: string) {
    this.set("feeToken", Value.fromString(value));
  }

  get anjToken(): string | null {
    let value = this.get("anjToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set anjToken(value: string | null) {
    if (!value) {
      this.unset("anjToken");
    } else {
      this.set("anjToken", Value.fromString(<string>value));
    }
  }

  get jurorFee(): BigInt {
    let value = this.get("jurorFee");
    return value!.toBigInt();
  }

  set jurorFee(value: BigInt) {
    this.set("jurorFee", Value.fromBigInt(value));
  }

  get draftFee(): BigInt {
    let value = this.get("draftFee");
    return value!.toBigInt();
  }

  set draftFee(value: BigInt) {
    this.set("draftFee", Value.fromBigInt(value));
  }

  get settleFee(): BigInt {
    let value = this.get("settleFee");
    return value!.toBigInt();
  }

  set settleFee(value: BigInt) {
    this.set("settleFee", Value.fromBigInt(value));
  }

  get evidenceTerms(): BigInt {
    let value = this.get("evidenceTerms");
    return value!.toBigInt();
  }

  set evidenceTerms(value: BigInt) {
    this.set("evidenceTerms", Value.fromBigInt(value));
  }

  get commitTerms(): BigInt {
    let value = this.get("commitTerms");
    return value!.toBigInt();
  }

  set commitTerms(value: BigInt) {
    this.set("commitTerms", Value.fromBigInt(value));
  }

  get revealTerms(): BigInt {
    let value = this.get("revealTerms");
    return value!.toBigInt();
  }

  set revealTerms(value: BigInt) {
    this.set("revealTerms", Value.fromBigInt(value));
  }

  get appealTerms(): BigInt {
    let value = this.get("appealTerms");
    return value!.toBigInt();
  }

  set appealTerms(value: BigInt) {
    this.set("appealTerms", Value.fromBigInt(value));
  }

  get appealConfirmationTerms(): BigInt {
    let value = this.get("appealConfirmationTerms");
    return value!.toBigInt();
  }

  set appealConfirmationTerms(value: BigInt) {
    this.set("appealConfirmationTerms", Value.fromBigInt(value));
  }

  get maxRulingOptions(): i32 {
    let value = this.get("maxRulingOptions");
    return value!.toI32();
  }

  set maxRulingOptions(value: i32) {
    this.set("maxRulingOptions", Value.fromI32(value));
  }

  get penaltyPct(): i32 {
    let value = this.get("penaltyPct");
    return value!.toI32();
  }

  set penaltyPct(value: i32) {
    this.set("penaltyPct", Value.fromI32(value));
  }

  get finalRoundReduction(): i32 {
    let value = this.get("finalRoundReduction");
    return value!.toI32();
  }

  set finalRoundReduction(value: i32) {
    this.set("finalRoundReduction", Value.fromI32(value));
  }

  get firstRoundJurorsNumber(): BigInt {
    let value = this.get("firstRoundJurorsNumber");
    return value!.toBigInt();
  }

  set firstRoundJurorsNumber(value: BigInt) {
    this.set("firstRoundJurorsNumber", Value.fromBigInt(value));
  }

  get appealStepFactor(): BigInt {
    let value = this.get("appealStepFactor");
    return value!.toBigInt();
  }

  set appealStepFactor(value: BigInt) {
    this.set("appealStepFactor", Value.fromBigInt(value));
  }

  get maxRegularAppealRounds(): BigInt {
    let value = this.get("maxRegularAppealRounds");
    return value!.toBigInt();
  }

  set maxRegularAppealRounds(value: BigInt) {
    this.set("maxRegularAppealRounds", Value.fromBigInt(value));
  }

  get finalRoundLockTerms(): BigInt {
    let value = this.get("finalRoundLockTerms");
    return value!.toBigInt();
  }

  set finalRoundLockTerms(value: BigInt) {
    this.set("finalRoundLockTerms", Value.fromBigInt(value));
  }

  get appealCollateralFactor(): BigInt {
    let value = this.get("appealCollateralFactor");
    return value!.toBigInt();
  }

  set appealCollateralFactor(value: BigInt) {
    this.set("appealCollateralFactor", Value.fromBigInt(value));
  }

  get appealConfirmCollateralFactor(): BigInt {
    let value = this.get("appealConfirmCollateralFactor");
    return value!.toBigInt();
  }

  set appealConfirmCollateralFactor(value: BigInt) {
    this.set("appealConfirmCollateralFactor", Value.fromBigInt(value));
  }

  get minActiveBalance(): BigInt {
    let value = this.get("minActiveBalance");
    return value!.toBigInt();
  }

  set minActiveBalance(value: BigInt) {
    this.set("minActiveBalance", Value.fromBigInt(value));
  }

  get minMaxPctTotalSupply(): BigInt {
    let value = this.get("minMaxPctTotalSupply");
    return value!.toBigInt();
  }

  set minMaxPctTotalSupply(value: BigInt) {
    this.set("minMaxPctTotalSupply", Value.fromBigInt(value));
  }

  get maxMaxPctTotalSupply(): BigInt {
    let value = this.get("maxMaxPctTotalSupply");
    return value!.toBigInt();
  }

  set maxMaxPctTotalSupply(value: BigInt) {
    this.set("maxMaxPctTotalSupply", Value.fromBigInt(value));
  }

  get fundsGovernor(): Bytes | null {
    let value = this.get("fundsGovernor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fundsGovernor(value: Bytes | null) {
    if (!value) {
      this.unset("fundsGovernor");
    } else {
      this.set("fundsGovernor", Value.fromBytes(<Bytes>value));
    }
  }

  get configGovernor(): Bytes | null {
    let value = this.get("configGovernor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set configGovernor(value: Bytes | null) {
    if (!value) {
      this.unset("configGovernor");
    } else {
      this.set("configGovernor", Value.fromBytes(<Bytes>value));
    }
  }

  get feesUpdater(): Bytes | null {
    let value = this.get("feesUpdater");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feesUpdater(value: Bytes | null) {
    if (!value) {
      this.unset("feesUpdater");
    } else {
      this.set("feesUpdater", Value.fromBytes(<Bytes>value));
    }
  }

  get modulesGovernor(): Bytes | null {
    let value = this.get("modulesGovernor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set modulesGovernor(value: Bytes | null) {
    if (!value) {
      this.unset("modulesGovernor");
    } else {
      this.set("modulesGovernor", Value.fromBytes(<Bytes>value));
    }
  }

  get brightIdRegister(): string | null {
    let value = this.get("brightIdRegister");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set brightIdRegister(value: string | null) {
    if (!value) {
      this.unset("brightIdRegister");
    } else {
      this.set("brightIdRegister", Value.fromString(<string>value));
    }
  }

  get jurorsRegistry(): string | null {
    let value = this.get("jurorsRegistry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set jurorsRegistry(value: string | null) {
    if (!value) {
      this.unset("jurorsRegistry");
    } else {
      this.set("jurorsRegistry", Value.fromString(<string>value));
    }
  }

  get subscriptions(): string | null {
    let value = this.get("subscriptions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subscriptions(value: string | null) {
    if (!value) {
      this.unset("subscriptions");
    } else {
      this.set("subscriptions", Value.fromString(<string>value));
    }
  }

  get modules(): Array<string> | null {
    let value = this.get("modules");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set modules(value: Array<string> | null) {
    if (!value) {
      this.unset("modules");
    } else {
      this.set("modules", Value.fromStringArray(<Array<string>>value));
    }
  }

  get terms(): Array<string> | null {
    let value = this.get("terms");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set terms(value: Array<string> | null) {
    if (!value) {
      this.unset("terms");
    } else {
      this.set("terms", Value.fromStringArray(<Array<string>>value));
    }
  }

  get moduleAddresses(): Array<string> {
    let value = this.get("moduleAddresses");
    return value!.toStringArray();
  }

  set moduleAddresses(value: Array<string>) {
    this.set("moduleAddresses", Value.fromStringArray(value));
  }
}

export class CourtTerm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourtTerm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourtTerm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CourtTerm", id.toString(), this);
    }
  }

  static load(id: string): CourtTerm | null {
    return changetype<CourtTerm | null>(store.get("CourtTerm", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get randomnessBN(): BigInt {
    let value = this.get("randomnessBN");
    return value!.toBigInt();
  }

  set randomnessBN(value: BigInt) {
    this.set("randomnessBN", Value.fromBigInt(value));
  }

  get randomness(): Bytes | null {
    let value = this.get("randomness");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set randomness(value: Bytes | null) {
    if (!value) {
      this.unset("randomness");
    } else {
      this.set("randomness", Value.fromBytes(<Bytes>value));
    }
  }

  get court(): string {
    let value = this.get("court");
    return value!.toString();
  }

  set court(value: string) {
    this.set("court", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class CourtModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CourtModule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CourtModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CourtModule", id.toString(), this);
    }
  }

  static load(id: string): CourtModule | null {
    return changetype<CourtModule | null>(store.get("CourtModule", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get court(): string {
    let value = this.get("court");
    return value!.toString();
  }

  set court(value: string) {
    this.set("court", Value.fromString(value));
  }
}

export class Dispute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dispute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Dispute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Dispute", id.toString(), this);
    }
  }

  static load(id: string): Dispute | null {
    return changetype<Dispute | null>(store.get("Dispute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get subject(): string {
    let value = this.get("subject");
    return value!.toString();
  }

  set subject(value: string) {
    this.set("subject", Value.fromString(value));
  }

  get evidences(): Array<string> | null {
    let value = this.get("evidences");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set evidences(value: Array<string> | null) {
    if (!value) {
      this.unset("evidences");
    } else {
      this.set("evidences", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createTermId(): BigInt {
    let value = this.get("createTermId");
    return value!.toBigInt();
  }

  set createTermId(value: BigInt) {
    this.set("createTermId", Value.fromBigInt(value));
  }

  get possibleRulings(): i32 {
    let value = this.get("possibleRulings");
    return value!.toI32();
  }

  set possibleRulings(value: i32) {
    this.set("possibleRulings", Value.fromI32(value));
  }

  get finalRuling(): i32 {
    let value = this.get("finalRuling");
    return value!.toI32();
  }

  set finalRuling(value: i32) {
    this.set("finalRuling", Value.fromI32(value));
  }

  get lastRoundId(): BigInt {
    let value = this.get("lastRoundId");
    return value!.toBigInt();
  }

  set lastRoundId(value: BigInt) {
    this.set("lastRoundId", Value.fromBigInt(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get settledPenalties(): boolean {
    let value = this.get("settledPenalties");
    return value!.toBoolean();
  }

  set settledPenalties(value: boolean) {
    this.set("settledPenalties", Value.fromBoolean(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get rawMetadata(): Bytes {
    let value = this.get("rawMetadata");
    return value!.toBytes();
  }

  set rawMetadata(value: Bytes) {
    this.set("rawMetadata", Value.fromBytes(value));
  }

  get disputable(): string | null {
    let value = this.get("disputable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set disputable(value: string | null) {
    if (!value) {
      this.unset("disputable");
    } else {
      this.set("disputable", Value.fromString(<string>value));
    }
  }

  get rounds(): Array<string> | null {
    let value = this.get("rounds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set rounds(value: Array<string> | null) {
    if (!value) {
      this.unset("rounds");
    } else {
      this.set("rounds", Value.fromStringArray(<Array<string>>value));
    }
  }

  get jurors(): Array<string> | null {
    let value = this.get("jurors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set jurors(value: Array<string> | null) {
    if (!value) {
      this.unset("jurors");
    } else {
      this.set("jurors", Value.fromStringArray(<Array<string>>value));
    }
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get ruledAt(): BigInt | null {
    let value = this.get("ruledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ruledAt(value: BigInt | null) {
    if (!value) {
      this.unset("ruledAt");
    } else {
      this.set("ruledAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Disputable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Disputable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Disputable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Disputable", id.toString(), this);
    }
  }

  static load(id: string): Disputable | null {
    return changetype<Disputable | null>(store.get("Disputable", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dispute(): string {
    let value = this.get("dispute");
    return value!.toString();
  }

  set dispute(value: string) {
    this.set("dispute", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get agreement(): string {
    let value = this.get("agreement");
    return value!.toString();
  }

  set agreement(value: string) {
    this.set("agreement", Value.fromString(value));
  }

  get actionId(): BigInt {
    let value = this.get("actionId");
    return value!.toBigInt();
  }

  set actionId(value: BigInt) {
    this.set("actionId", Value.fromBigInt(value));
  }

  get challengeId(): BigInt {
    let value = this.get("challengeId");
    return value!.toBigInt();
  }

  set challengeId(value: BigInt) {
    this.set("challengeId", Value.fromBigInt(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get disputableActionId(): BigInt {
    let value = this.get("disputableActionId");
    return value!.toBigInt();
  }

  set disputableActionId(value: BigInt) {
    this.set("disputableActionId", Value.fromBigInt(value));
  }

  get defendant(): Bytes {
    let value = this.get("defendant");
    return value!.toBytes();
  }

  set defendant(value: Bytes) {
    this.set("defendant", Value.fromBytes(value));
  }

  get plaintiff(): Bytes {
    let value = this.get("plaintiff");
    return value!.toBytes();
  }

  set plaintiff(value: Bytes) {
    this.set("plaintiff", Value.fromBytes(value));
  }

  get organization(): Bytes {
    let value = this.get("organization");
    return value!.toBytes();
  }

  set organization(value: Bytes) {
    this.set("organization", Value.fromBytes(value));
  }

  get actionContext(): string {
    let value = this.get("actionContext");
    return value!.toString();
  }

  set actionContext(value: string) {
    this.set("actionContext", Value.fromString(value));
  }

  get rawActionContext(): Bytes {
    let value = this.get("rawActionContext");
    return value!.toBytes();
  }

  set rawActionContext(value: Bytes) {
    this.set("rawActionContext", Value.fromBytes(value));
  }

  get challengeContext(): string {
    let value = this.get("challengeContext");
    return value!.toString();
  }

  set challengeContext(value: string) {
    this.set("challengeContext", Value.fromString(value));
  }

  get rawChallengeContext(): Bytes {
    let value = this.get("rawChallengeContext");
    return value!.toBytes();
  }

  set rawChallengeContext(value: Bytes) {
    this.set("rawChallengeContext", Value.fromBytes(value));
  }
}

export class Arbitrable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Arbitrable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Arbitrable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Arbitrable", id.toString(), this);
    }
  }

  static load(id: string): Arbitrable | null {
    return changetype<Arbitrable | null>(store.get("Arbitrable", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get disputes(): Array<string> | null {
    let value = this.get("disputes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set disputes(value: Array<string> | null) {
    if (!value) {
      this.unset("disputes");
    } else {
      this.set("disputes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Evidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Evidence entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Evidence must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Evidence", id.toString(), this);
    }
  }

  static load(id: string): Evidence | null {
    return changetype<Evidence | null>(store.get("Evidence", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get arbitrable(): string {
    let value = this.get("arbitrable");
    return value!.toString();
  }

  set arbitrable(value: string) {
    this.set("arbitrable", Value.fromString(value));
  }

  get dispute(): string {
    let value = this.get("dispute");
    return value!.toString();
  }

  set dispute(value: string) {
    this.set("dispute", Value.fromString(value));
  }

  get data(): Bytes {
    let value = this.get("data");
    return value!.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value!.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class AdjudicationRound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdjudicationRound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AdjudicationRound must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AdjudicationRound", id.toString(), this);
    }
  }

  static load(id: string): AdjudicationRound | null {
    return changetype<AdjudicationRound | null>(
      store.get("AdjudicationRound", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get dispute(): string {
    let value = this.get("dispute");
    return value!.toString();
  }

  set dispute(value: string) {
    this.set("dispute", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get stateInt(): i32 {
    let value = this.get("stateInt");
    return value!.toI32();
  }

  set stateInt(value: i32) {
    this.set("stateInt", Value.fromI32(value));
  }

  get draftTermId(): BigInt {
    let value = this.get("draftTermId");
    return value!.toBigInt();
  }

  set draftTermId(value: BigInt) {
    this.set("draftTermId", Value.fromBigInt(value));
  }

  get draftedTermId(): BigInt | null {
    let value = this.get("draftedTermId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set draftedTermId(value: BigInt | null) {
    if (!value) {
      this.unset("draftedTermId");
    } else {
      this.set("draftedTermId", Value.fromBigInt(<BigInt>value));
    }
  }

  get jurorsNumber(): BigInt {
    let value = this.get("jurorsNumber");
    return value!.toBigInt();
  }

  set jurorsNumber(value: BigInt) {
    this.set("jurorsNumber", Value.fromBigInt(value));
  }

  get settledPenalties(): boolean {
    let value = this.get("settledPenalties");
    return value!.toBoolean();
  }

  set settledPenalties(value: boolean) {
    this.set("settledPenalties", Value.fromBoolean(value));
  }

  get jurorFees(): BigInt {
    let value = this.get("jurorFees");
    return value!.toBigInt();
  }

  set jurorFees(value: BigInt) {
    this.set("jurorFees", Value.fromBigInt(value));
  }

  get jurors(): Array<string> | null {
    let value = this.get("jurors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set jurors(value: Array<string> | null) {
    if (!value) {
      this.unset("jurors");
    } else {
      this.set("jurors", Value.fromStringArray(<Array<string>>value));
    }
  }

  get delayedTerms(): BigInt {
    let value = this.get("delayedTerms");
    return value!.toBigInt();
  }

  set delayedTerms(value: BigInt) {
    this.set("delayedTerms", Value.fromBigInt(value));
  }

  get selectedJurors(): BigInt {
    let value = this.get("selectedJurors");
    return value!.toBigInt();
  }

  set selectedJurors(value: BigInt) {
    this.set("selectedJurors", Value.fromBigInt(value));
  }

  get coherentJurors(): BigInt {
    let value = this.get("coherentJurors");
    return value!.toBigInt();
  }

  set coherentJurors(value: BigInt) {
    this.set("coherentJurors", Value.fromBigInt(value));
  }

  get collectedTokens(): BigInt {
    let value = this.get("collectedTokens");
    return value!.toBigInt();
  }

  set collectedTokens(value: BigInt) {
    this.set("collectedTokens", Value.fromBigInt(value));
  }

  get appeal(): string | null {
    let value = this.get("appeal");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set appeal(value: string | null) {
    if (!value) {
      this.unset("appeal");
    } else {
      this.set("appeal", Value.fromString(<string>value));
    }
  }

  get vote(): string | null {
    let value = this.get("vote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vote(value: string | null) {
    if (!value) {
      this.unset("vote");
    } else {
      this.set("vote", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get winningOutcome(): string {
    let value = this.get("winningOutcome");
    return value!.toString();
  }

  set winningOutcome(value: string) {
    this.set("winningOutcome", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Appeal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Appeal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Appeal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Appeal", id.toString(), this);
    }
  }

  static load(id: string): Appeal | null {
    return changetype<Appeal | null>(store.get("Appeal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    return value!.toString();
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get maker(): Bytes {
    let value = this.get("maker");
    return value!.toBytes();
  }

  set maker(value: Bytes) {
    this.set("maker", Value.fromBytes(value));
  }

  get appealedRuling(): BigInt {
    let value = this.get("appealedRuling");
    return value!.toBigInt();
  }

  set appealedRuling(value: BigInt) {
    this.set("appealedRuling", Value.fromBigInt(value));
  }

  get appealDeposit(): BigInt {
    let value = this.get("appealDeposit");
    return value!.toBigInt();
  }

  set appealDeposit(value: BigInt) {
    this.set("appealDeposit", Value.fromBigInt(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get opposedRuling(): BigInt {
    let value = this.get("opposedRuling");
    return value!.toBigInt();
  }

  set opposedRuling(value: BigInt) {
    this.set("opposedRuling", Value.fromBigInt(value));
  }

  get confirmAppealDeposit(): BigInt {
    let value = this.get("confirmAppealDeposit");
    return value!.toBigInt();
  }

  set confirmAppealDeposit(value: BigInt) {
    this.set("confirmAppealDeposit", Value.fromBigInt(value));
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value!.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }

  get settledAt(): BigInt | null {
    let value = this.get("settledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settledAt(value: BigInt | null) {
    if (!value) {
      this.unset("settledAt");
    } else {
      this.set("settledAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get confirmedAt(): BigInt | null {
    let value = this.get("confirmedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set confirmedAt(value: BigInt | null) {
    if (!value) {
      this.unset("confirmedAt");
    } else {
      this.set("confirmedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Juror extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Juror entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Juror must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Juror", id.toString(), this);
    }
  }

  static load(id: string): Juror | null {
    return changetype<Juror | null>(store.get("Juror", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get treeId(): BigInt {
    let value = this.get("treeId");
    return value!.toBigInt();
  }

  set treeId(value: BigInt) {
    this.set("treeId", Value.fromBigInt(value));
  }

  get activeBalance(): BigInt {
    let value = this.get("activeBalance");
    return value!.toBigInt();
  }

  set activeBalance(value: BigInt) {
    this.set("activeBalance", Value.fromBigInt(value));
  }

  get lockedBalance(): BigInt {
    let value = this.get("lockedBalance");
    return value!.toBigInt();
  }

  set lockedBalance(value: BigInt) {
    this.set("lockedBalance", Value.fromBigInt(value));
  }

  get availableBalance(): BigInt {
    let value = this.get("availableBalance");
    return value!.toBigInt();
  }

  set availableBalance(value: BigInt) {
    this.set("availableBalance", Value.fromBigInt(value));
  }

  get deactivationBalance(): BigInt {
    let value = this.get("deactivationBalance");
    return value!.toBigInt();
  }

  set deactivationBalance(value: BigInt) {
    this.set("deactivationBalance", Value.fromBigInt(value));
  }

  get withdrawalsLockTermId(): BigInt {
    let value = this.get("withdrawalsLockTermId");
    return value!.toBigInt();
  }

  set withdrawalsLockTermId(value: BigInt) {
    this.set("withdrawalsLockTermId", Value.fromBigInt(value));
  }

  get disputes(): Array<string> | null {
    let value = this.get("disputes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set disputes(value: Array<string> | null) {
    if (!value) {
      this.unset("disputes");
    } else {
      this.set("disputes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get drafts(): Array<string> | null {
    let value = this.get("drafts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set drafts(value: Array<string> | null) {
    if (!value) {
      this.unset("drafts");
    } else {
      this.set("drafts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get anjMovements(): Array<string> | null {
    let value = this.get("anjMovements");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set anjMovements(value: Array<string> | null) {
    if (!value) {
      this.unset("anjMovements");
    } else {
      this.set("anjMovements", Value.fromStringArray(<Array<string>>value));
    }
  }

  get claimedSubscriptionFees(): Array<string> | null {
    let value = this.get("claimedSubscriptionFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set claimedSubscriptionFees(value: Array<string> | null) {
    if (!value) {
      this.unset("claimedSubscriptionFees");
    } else {
      this.set(
        "claimedSubscriptionFees",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get uniqueUserId(): Bytes | null {
    let value = this.get("uniqueUserId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set uniqueUserId(value: Bytes | null) {
    if (!value) {
      this.unset("uniqueUserId");
    } else {
      this.set("uniqueUserId", Value.fromBytes(<Bytes>value));
    }
  }

  get registerTime(): BigInt | null {
    let value = this.get("registerTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set registerTime(value: BigInt | null) {
    if (!value) {
      this.unset("registerTime");
    } else {
      this.set("registerTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get addressVoided(): boolean {
    let value = this.get("addressVoided");
    return value!.toBoolean();
  }

  set addressVoided(value: boolean) {
    this.set("addressVoided", Value.fromBoolean(value));
  }
}

export class JurorDispute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JurorDispute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JurorDispute must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JurorDispute", id.toString(), this);
    }
  }

  static load(id: string): JurorDispute | null {
    return changetype<JurorDispute | null>(store.get("JurorDispute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get juror(): string {
    let value = this.get("juror");
    return value!.toString();
  }

  set juror(value: string) {
    this.set("juror", Value.fromString(value));
  }

  get dispute(): string {
    let value = this.get("dispute");
    return value!.toString();
  }

  set dispute(value: string) {
    this.set("dispute", Value.fromString(value));
  }
}

export class JurorDraft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JurorDraft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JurorDraft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JurorDraft", id.toString(), this);
    }
  }

  static load(id: string): JurorDraft | null {
    return changetype<JurorDraft | null>(store.get("JurorDraft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get round(): string {
    let value = this.get("round");
    return value!.toString();
  }

  set round(value: string) {
    this.set("round", Value.fromString(value));
  }

  get juror(): string {
    let value = this.get("juror");
    return value!.toString();
  }

  set juror(value: string) {
    this.set("juror", Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get("weight");
    return value!.toBigInt();
  }

  set weight(value: BigInt) {
    this.set("weight", Value.fromBigInt(value));
  }

  get locked(): BigInt {
    let value = this.get("locked");
    return value!.toBigInt();
  }

  set locked(value: BigInt) {
    this.set("locked", Value.fromBigInt(value));
  }

  get rewarded(): boolean {
    let value = this.get("rewarded");
    return value!.toBoolean();
  }

  set rewarded(value: boolean) {
    this.set("rewarded", Value.fromBoolean(value));
  }

  get rewardedAt(): BigInt | null {
    let value = this.get("rewardedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rewardedAt(value: BigInt | null) {
    if (!value) {
      this.unset("rewardedAt");
    } else {
      this.set("rewardedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get commitment(): Bytes | null {
    let value = this.get("commitment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set commitment(value: Bytes | null) {
    if (!value) {
      this.unset("commitment");
    } else {
      this.set("commitment", Value.fromBytes(<Bytes>value));
    }
  }

  get commitmentDate(): BigInt | null {
    let value = this.get("commitmentDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set commitmentDate(value: BigInt | null) {
    if (!value) {
      this.unset("commitmentDate");
    } else {
      this.set("commitmentDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get revealDate(): BigInt | null {
    let value = this.get("revealDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set revealDate(value: BigInt | null) {
    if (!value) {
      this.unset("revealDate");
    } else {
      this.set("revealDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get outcome(): i32 {
    let value = this.get("outcome");
    return value!.toI32();
  }

  set outcome(value: i32) {
    this.set("outcome", Value.fromI32(value));
  }

  get leaker(): Bytes | null {
    let value = this.get("leaker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set leaker(value: Bytes | null) {
    if (!value) {
      this.unset("leaker");
    } else {
      this.set("leaker", Value.fromBytes(<Bytes>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class ANJMovement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ANJMovement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ANJMovement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ANJMovement", id.toString(), this);
    }
  }

  static load(id: string): ANJMovement | null {
    return changetype<ANJMovement | null>(store.get("ANJMovement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get juror(): string {
    let value = this.get("juror");
    return value!.toString();
  }

  set juror(value: string) {
    this.set("juror", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get effectiveTermId(): BigInt | null {
    let value = this.get("effectiveTermId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set effectiveTermId(value: BigInt | null) {
    if (!value) {
      this.unset("effectiveTermId");
    } else {
      this.set("effectiveTermId", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class FeeMovement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeMovement entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeMovement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeMovement", id.toString(), this);
    }
  }

  static load(id: string): FeeMovement | null {
    return changetype<FeeMovement | null>(store.get("FeeMovement", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class TreasuryBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TreasuryBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TreasuryBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TreasuryBalance", id.toString(), this);
    }
  }

  static load(id: string): TreasuryBalance | null {
    return changetype<TreasuryBalance | null>(store.get("TreasuryBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class BrightIdRegisterModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BrightIdRegisterModule entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BrightIdRegisterModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BrightIdRegisterModule", id.toString(), this);
    }
  }

  static load(id: string): BrightIdRegisterModule | null {
    return changetype<BrightIdRegisterModule | null>(
      store.get("BrightIdRegisterModule", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get court(): string {
    let value = this.get("court");
    return value!.toString();
  }

  set court(value: string) {
    this.set("court", Value.fromString(value));
  }

  get verifiers(): Array<Bytes> {
    let value = this.get("verifiers");
    return value!.toBytesArray();
  }

  set verifiers(value: Array<Bytes>) {
    this.set("verifiers", Value.fromBytesArray(value));
  }

  get registrationPeriod(): BigInt {
    let value = this.get("registrationPeriod");
    return value!.toBigInt();
  }

  set registrationPeriod(value: BigInt) {
    this.set("registrationPeriod", Value.fromBigInt(value));
  }

  get verificationTimestampVariance(): BigInt {
    let value = this.get("verificationTimestampVariance");
    return value!.toBigInt();
  }

  set verificationTimestampVariance(value: BigInt) {
    this.set("verificationTimestampVariance", Value.fromBigInt(value));
  }
}

export class JurorsRegistryModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JurorsRegistryModule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JurorsRegistryModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JurorsRegistryModule", id.toString(), this);
    }
  }

  static load(id: string): JurorsRegistryModule | null {
    return changetype<JurorsRegistryModule | null>(
      store.get("JurorsRegistryModule", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get court(): string {
    let value = this.get("court");
    return value!.toString();
  }

  set court(value: string) {
    this.set("court", Value.fromString(value));
  }

  get totalStaked(): BigInt {
    let value = this.get("totalStaked");
    return value!.toBigInt();
  }

  set totalStaked(value: BigInt) {
    this.set("totalStaked", Value.fromBigInt(value));
  }

  get totalActive(): BigInt {
    let value = this.get("totalActive");
    return value!.toBigInt();
  }

  set totalActive(value: BigInt) {
    this.set("totalActive", Value.fromBigInt(value));
  }

  get totalDeactivation(): BigInt {
    let value = this.get("totalDeactivation");
    return value!.toBigInt();
  }

  set totalDeactivation(value: BigInt) {
    this.set("totalDeactivation", Value.fromBigInt(value));
  }
}

export class SubscriptionModule extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubscriptionModule entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubscriptionModule must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubscriptionModule", id.toString(), this);
    }
  }

  static load(id: string): SubscriptionModule | null {
    return changetype<SubscriptionModule | null>(
      store.get("SubscriptionModule", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get court(): string {
    let value = this.get("court");
    return value!.toString();
  }

  set court(value: string) {
    this.set("court", Value.fromString(value));
  }

  get currentPeriod(): BigInt {
    let value = this.get("currentPeriod");
    return value!.toBigInt();
  }

  set currentPeriod(value: BigInt) {
    this.set("currentPeriod", Value.fromBigInt(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    return value!.toBytes();
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get periodDuration(): BigInt {
    let value = this.get("periodDuration");
    return value!.toBigInt();
  }

  set periodDuration(value: BigInt) {
    this.set("periodDuration", Value.fromBigInt(value));
  }

  get periodPercentageYield(): BigInt {
    let value = this.get("periodPercentageYield");
    return value!.toBigInt();
  }

  set periodPercentageYield(value: BigInt) {
    this.set("periodPercentageYield", Value.fromBigInt(value));
  }

  get periods(): Array<string> | null {
    let value = this.get("periods");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set periods(value: Array<string> | null) {
    if (!value) {
      this.unset("periods");
    } else {
      this.set("periods", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class SubscriptionPeriod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SubscriptionPeriod entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SubscriptionPeriod must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SubscriptionPeriod", id.toString(), this);
    }
  }

  static load(id: string): SubscriptionPeriod | null {
    return changetype<SubscriptionPeriod | null>(
      store.get("SubscriptionPeriod", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    return value!.toBytes();
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get donatedFees(): BigInt {
    let value = this.get("donatedFees");
    return value!.toBigInt();
  }

  set donatedFees(value: BigInt) {
    this.set("donatedFees", Value.fromBigInt(value));
  }

  get balanceCheckpoint(): BigInt {
    let value = this.get("balanceCheckpoint");
    return value!.toBigInt();
  }

  set balanceCheckpoint(value: BigInt) {
    this.set("balanceCheckpoint", Value.fromBigInt(value));
  }

  get totalActiveBalance(): BigInt {
    let value = this.get("totalActiveBalance");
    return value!.toBigInt();
  }

  set totalActiveBalance(value: BigInt) {
    this.set("totalActiveBalance", Value.fromBigInt(value));
  }

  get instance(): string {
    let value = this.get("instance");
    return value!.toString();
  }

  set instance(value: string) {
    this.set("instance", Value.fromString(value));
  }

  get jurorClaims(): Array<string> | null {
    let value = this.get("jurorClaims");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set jurorClaims(value: Array<string> | null) {
    if (!value) {
      this.unset("jurorClaims");
    } else {
      this.set("jurorClaims", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class JurorSubscriptionFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JurorSubscriptionFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JurorSubscriptionFee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JurorSubscriptionFee", id.toString(), this);
    }
  }

  static load(id: string): JurorSubscriptionFee | null {
    return changetype<JurorSubscriptionFee | null>(
      store.get("JurorSubscriptionFee", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get juror(): string {
    let value = this.get("juror");
    return value!.toString();
  }

  set juror(value: string) {
    this.set("juror", Value.fromString(value));
  }

  get period(): string {
    let value = this.get("period");
    return value!.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}
